buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

ext {
    jacocoVersion = '0.7.7.201606060606'
    checkstyleVersion = '6.16.1'
    pmdVersion = '5.4.1'
}

jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/countries.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

configurations {
    jaxb
}

jar {
    baseName = 'gs-producing-web-service'
    version =  '0.1.0'
    from genJaxb.classesDir
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-security')
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("com.h2database:h2")
	compile('org.springframework:spring-context-support:4.1.8.RELEASE')
	compile('com.google.guava:guava:19.0-rc2')
	compile("org.springframework.boot:spring-boot-starter-ws")
	compile("wsdl4j:wsdl4j:1.6.1")
	jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
	compile(files(genJaxb.classesDir).builtBy(genJaxb))

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

defaultTasks 'clean', 'build'

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = true
    }
}
test.finalizedBy jacocoTestReport

checkstyle {
    toolVersion = checkstyleVersion
    config = rootProject.resources.text.fromFile('etc/checkstyle/rules.xml')
}

pmd{
    toolVersion = pmdVersion
    ruleSetConfig = rootProject.resources.text.fromFile('etc/pmd/ruleset.xml')
    ignoreFailures = true
}

check.finalizedBy projectReport
projectReport.finalizedBy buildDashboard